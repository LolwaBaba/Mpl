2A] Aim: Execution of Unix General Purpose Utility Commands

Commands :
1.whoami
  who
2.which man
4.echo Apsit
5.history
6.clear
7.id
8.pwd
9.date
10.time
11.uptime(how long the system is running)
12.cal [to install cal "sudo apt install ncal"]
13.cat (It reads data from the file and gives their content as output)
    Steps :
    i.create file and write content in text editor and save in your folder
    ii. Command : cat filename / cat>filename
14.ping
   Steps :
   i.open 2nd terminal and type ifconfig for getting the ip address
   ii. Command : ping ipaddress

2B] Aim: Working with Editor Vi /other editor.

To open vim type on terminal :
 vim filename.sh and press i to insert
To exit :
 i.esc
 ii.":wq"


Commands :
1.h command : moves cursor to previous character
2.l command : moves cursor to next character
3.j command : cursor to next line
4.k command : cursor to previous line
5.x command : deletes the characters
6.i command – inserts new characters
7.o command : inserts new blank line between cursor
8.dd command : deletes a line from the text
9.dw command : deletes a word from the text
10.w - is used to save the file after changes
11.$ : moves to the end of the line


3B] Aim: Execution of File System Management Commands

1.ls command
2.Cd : Changing Directories
3.mkdir directoryname (Creating Directories)
4.rmdir directoryname(Removing Directories)
5.Creating file :
  i.touch filename.text
  ii.touch file{1..3}.txt
6.echo Hello (to print)
7.Linux rm | Linux Delete File : rm filename.txt
8.Linux cp | Linux Copy File :
  i. cp <(tobecopy)filename> <(pastein)filename>
  ii. Example : cp -r test /home/apsit/downloads
9.Pipe in Linux :
  i. cat filename.txt | less
  ii. cat filename.txt | more
10.The 'grep' command :
  i. cat filename.txt | grep apple
  ii.cat filename.txt | grep word_to_trace
  iii. cat filename.txt | grep -i a [words containing a letter]
  iv. cat filename.txt |  grep ^a [starting with a]
  v. cat filename.txt |  grep t$ [ending with a]
11.The 'sort' command : sort filename.txt
12.Linux tr : (lowercase to uppercase)
   i. cat filename.txt | tr 'lowercase_letters' 'uppercase_letters'
   ii.cat filename.txt | tr 'red' 'RED'
13.Linux head command : (first 10 lines are displayed)
   i. head filename.txt
   ii.head -15 filename.txt
14.Linux tail command : (last 10 lines are displayed)
   i. tail filename.txt
   ii.tail -15 filename.txt
15.Linux wc Command : (Linux wc command helps in counting the lines, words, and characters in a file. It displays the number of lines, number of characters, and the number of words in a file)
   i. wc filename.txt




3C] Aim: Execution of File System Management: Compression and Archiving Commands like  tar, gzip, bzip2, unzip etc.

On terminal: 
cd Desktop
ls
cd vedant
ls 
touch file{1..6}.txt
ls

1.ZIP command : zip fun.zip file2.txt
  Unzip command: unzip fun.zip

2.GZIP command : gzip fun.zip file2.txt
  Unzip command: gunzip fun.zip

3.Tar command
   1.	Tar –cvf fun.tar file1.txt  file2.txt
   2.	Ls
   3.	Tar –zcvf fun.tar file1.txt file2.txt
   4.	Ls



  4] Aim : Execution of USER MANAGEMENT COMMANDS.


1.	whoami
2.	who
3.	w
4.	id


5.	sudo su
6.	useradd unixlab1
7.	passwd unixlab1
8.	exit


10.	sudo groupadd seit
11.	cat /etc/group

	
14.	sudo usermod –G seit athx
15.	id unixlab1
16.	sudo cat /etc/passwd


17.  sudo userdel unixlab 
18.  sudo groupdel seit
19.  sudo cat /etc/passwd


20.  sudo chage –l root
 
21.chfn





5] Aim: Execution of Process Management Commands

1.	sleep 50
2.	sleep 50 &
3.	jobs
4.	sleep 50 m%
5.	fg  % 2
6.	sleep 50 &
7.	fg %2
8.	top &
9.	fg %2
10.	jobs
11.	sleep 10 &
12.	sleep 10
13.	sleep 100 &
14.	sleep 100 
15.	ps
16.	ps uid
17.	ps given id
18.	pstree
19.	ps –el |grep terminal
20.	nice –10 gnome-terminal
21.	pidof chrome
22.	killall chrome




Exp 6. Execution of Memory Management Commands
1.	free
2.	free –b
3.	free –m
4.	free –g
5.	free –t
6.	cat /proc/meminfo
7.	df
8.	df –h
9.	df –t
10.	du
11.	vmstat
12.	vmstat –a
13.	vmstat –f


Exp7. Execution of basic programs of shell scripting

1.Create a file using a vi editor(or any other editor). Name script file with extension .sh
2.Start the script with #! /bin/sh
3.Write some code.
4.Save the script file as filename.sh
5.For executing the script type bash filename.sh





Program 1: simple Calci
#!/bin/bash

read -p 'Enter a : '  a
read -p 'Enter b : '  b

add=$((a + b))
echo Addition of a and b is: $add
sub=$((a - b))
echo Subtraction of a and b is: $sub
mul=$((a * b))
echo Multiplication of a and b is: $mul
div=$((a / b))
echo Division of a and b is: $div
mod=$((a % b))
echo Modulus of a and b is: $mod
((++a))
echo Increment operator when applied on "a" results into a = $a
((--b))
echo Decrement operator when applied on "b" results into b = $b
Terminal : vim finlename.sh
bash filename.sh

Program 2:ROI
#!/bin/bash
echo "Enter Amount:"
read p
echo "Enter Time:"
read t
echo "Enter ROI:"
read r
i=$((p * t * r))
i=$((i / 100))

 vim filename.sh
bash filename.sh

Program 3:Leap Year
#!/bin/bash

echo "LEAP YEAR CHECKER"
read -p "Enter the year to check: " check_year

if [ $((check_year % 4)) -eq 0 -a $((check_year % 100)) -ne 0 ] || [ $((check_year % 400)) -eq 0 ]; then
    echo "$check_year is a leap year"
else
    echo "$check_year is not a leap year"
fi
vim filename .sh 
bash filename .sh


Exp8. Execution of advanced programs of shell scripting. 

a. Write a shell script to implement menu-driven calculator using case statement. 
b. Write a shell script to compare two strings. 
c. Write a shell script to read and check if the directory / file exists or not, if not make the directory / file.


Program 1: Write a shell script to implement menu-driven calculator using case statement.
#!/bash/sh

echo "Enter the first number: "
read a

echo "Enter the second number: "
read b

echo "Enter the operators: "
echo -e "Addition: +\nSubtraction: -\nMultiplication: x\nDivision: /"
read op

case $op in
+) c==`expr $a + $b`
echo "Sum of $a and $b is $c";;

-) c==`expr $a - $b`
echo "Difference of $a and $b is $c";;

x) c==`expr $a \* $b`
echo "Product of $a and $b is $c";;

/) c==`expr $a / $b`
echo "Division of $a and $b is $c";;

*) echo "Invalid operator"
exit;;
esac
Terminal: vim  filenamesh
bash flnm.sh

Program : 2 Write a shell script to compare two strings. 

#!/bash/sh
read -p "Enter two string: " str1 str2
if [ $str1 == $str2 ]
then
	echo "Match"
else
	echo "Does not Match"
fi

Program 3: Write a shell script to read and check if the directory / file exists or not, if not make the directory / file.
#!/bash/sh
echo "Enter directory name: "
read ndir

if [ -d "$ndir" ]
then
	echo "Directory exits"
else
	`mkdir $ndir`
	echo "Directory 







Exp 9. Execution of scripts using grep / sed commands 
a. Write a script using grep command to find the number of words character, words and lines in a file. 
b. Write a script using egrep command to display list of specific type of files in the directory. 
c. Write a script using sed command to replace all occurrences of particular word in given a file.


Program 1. Write a script using grep command to find the number of words character, words and lines in a file.
#!/bin/bash
echo Enter the filename
read file
w=`cat $file | wc -w`
c=`cat $file | wc -c`
l=`grep -c "." $file`
echo Number of characters in $file is $c
echo Number of words in $file is $w
echo Number of lines in $file is $l
grep -i "grep" $file

Terminal : cat 9a.txt
Bash exp9a.sh

Program 2 : Write a script using egrep command to display list of specific type of files in the directory.
#!/bin/bash

egrep -r '*.sh' .
egrep -r "sample" *
egrep -c '^begin|end$' intro.txt


Program 3: Write a script using sed command to replace all occurrences of particular word in given a file.
i.Nano filename.txt
  Cat filename.txt

ii.Code :
   #!/bin/bash
   sed -i 's/existing word/new word/g' new1.txt

iii. bash filename.sh



Exp10.: Execute the following scripts using awk/perl languages: 
a) Write an awk script to print all even numbers in a given range.
 b) Write an awk script to develop a Fibonacci series (take user input for number of terms). c) Write a perl script to check a number is prime or not
c) Write a perl script to check a number is prime or not

Program 1. Write an awk script to print all even numbers in a given range.

i.vi try.sh

ii. Code :
    #!/bin/bash
    
    read -p "Number: " num
    awk '{for(i=0;i<=$1;i++) if(i%2 == 0) print i}'<<<$num

iii.bash try.sh



Program 2: Write an awk script to develop a Fibonacci series (take user input for number of terms). 
i.vi aw.sh

ii.Code:

#!/bin/bash

echo "How Many Number"
read num
echo num is $num
awk ' BEGIN{
a=0; b=1;
for(i=0; i<'${num}';i++)
	{
		print a;
		c=a+b;
		a=b;
		b=c;
	}
}'

iii.bash aw.sh



Program 3. Write a perl script to check a number is prime or not
i.vi a.pl

ii.code :

#!/bin/perl

use strict;
use warnings;
print "no","\n";
my $n = <STDIN>;
my $count=2;
my $j=2;
my $zero_rem = 0;
my $rem = $n % $j;
for (my $count=2; $count<=$n; $count++) {
	$zero_rem = 0;
	for (my $j=2; $j<$count; $j++) {
		$rem = $count % $j;
		if ($rem == 0) {
			$zero_rem = 1;
			last;
		}
	}
	if(!$zero_rem){
		print"$count is a prime\n"
	}
}


iii.perl a.pl



Exp11. To create symlink and hardlink of the file.

a) Create symlink: $ ln -s source.file symlink.file
touch file 
ls -l file 
ls -il file 
ln -s /home/Desktop/file /boot/file2 
sudo ln -s /home/Desktop/file /boot/file2 ()
ls -l file2
ls -l /boot/file2
rm file
ls -il /boot/file2 

b)Create hardlink: $ ln source.file hardlink.file
(hard link )
touch file3
ls -l file3
ls -il file3
sudo ln -s /home//Desktop/file3 /home/Desktop/file4
ls -l file4 
ls -il file4
rm file3
ls -l file4

